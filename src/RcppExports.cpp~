/*
 * rcpp_maplist.cpp
 * This file is part of hashtable
 *
 * Copyright (C) 2013 - Giacomo Bergami
 *
 * hashtable is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * hashtable is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with hashtable. If not, see <http://www.gnu.org/licenses/>.
 */
// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getPtr
SEXP getPtr(SEXP g);
RcppExport SEXP hashtable_getPtr(SEXP gSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP g = Rcpp::as<SEXP >(gSEXP);
        SEXP __result = getPtr(g);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ptr_ToObj
SEXP ptr_ToObj(SEXP g);
RcppExport SEXP hashtable_ptr_ToObj(SEXP gSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP g = Rcpp::as<SEXP >(gSEXP);
        SEXP __result = ptr_ToObj(g);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rmHashtable
SEXP rmHashtable(SEXP xp);
RcppExport SEXP hashtable_rmHashtable(SEXP xpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP xp = Rcpp::as<SEXP >(xpSEXP);
        SEXP __result = rmHashtable(xp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// newHashT
SEXP newHashT();
RcppExport SEXP hashtable_newHashT() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP __result = newHashT();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getHMaxId
SEXP getHMaxId(SEXP xp);
RcppExport SEXP hashtable_getHMaxId(SEXP xpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP xp = Rcpp::as<SEXP >(xpSEXP);
        SEXP __result = getHMaxId(xp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getHSize
SEXP getHSize(SEXP xp);
RcppExport SEXP hashtable_getHSize(SEXP xpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP xp = Rcpp::as<SEXP >(xpSEXP);
        SEXP __result = getHSize(xp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// idToObj
SEXP idToObj(SEXP xp, SEXP id);
RcppExport SEXP hashtable_idToObj(SEXP xpSEXP, SEXP idSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP xp = Rcpp::as<SEXP >(xpSEXP);
        SEXP id = Rcpp::as<SEXP >(idSEXP);
        SEXP __result = idToObj(xp, id);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// addKeyValueElem
SEXP addKeyValueElem(SEXP xp, SEXP key, SEXP val);
RcppExport SEXP hashtable_addKeyValueElem(SEXP xpSEXP, SEXP keySEXP, SEXP valSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP xp = Rcpp::as<SEXP >(xpSEXP);
        SEXP key = Rcpp::as<SEXP >(keySEXP);
        SEXP val = Rcpp::as<SEXP >(valSEXP);
        SEXP __result = addKeyValueElem(xp, key, val);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// remKeyValueElem
SEXP remKeyValueElem(SEXP xp, SEXP key, SEXP val);
RcppExport SEXP hashtable_remKeyValueElem(SEXP xpSEXP, SEXP keySEXP, SEXP valSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP xp = Rcpp::as<SEXP >(xpSEXP);
        SEXP key = Rcpp::as<SEXP >(keySEXP);
        SEXP val = Rcpp::as<SEXP >(valSEXP);
        SEXP __result = remKeyValueElem(xp, key, val);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
